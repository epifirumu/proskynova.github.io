name: Build and publish

on:
  workflow_dispatch:
    inputs:
      release:
        description: 发布 Release
        required: true
        type: boolean
  push:
    branches:
      - "main"
      - "release"
    paths:
      - ".github/**"
      - ".vitepress/**"
      - "src/**"
      - "theme/**"
      - "book.toml"
      - "package-lock.json"
      - "package.json"

permissions:
  contents: write
  issues: write
  pull-requests: write

concurrency:
  group: "build"
  cancel-in-progress: true

jobs:
  build:
    name: Build and publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: current
          cache: npm

      - name: Install node packages
        run: npm ci

      - name: Install mdBook
        uses: baptiste0928/cargo-install@v2
        with:
          crate: mdbook
          git: https://github.com/rust-lang/mdBook

      - name: Install mdbook-epub
        uses: baptiste0928/cargo-install@v2
        with:
          crate: mdbook-epub
          git: https://github.com/Michael-F-Bryan/mdbook-epub

      - name: Install mdbook-typst-pdf
        uses: baptiste0928/cargo-install@v2
        with:
          crate: mdbook-typst-pdf
          git: https://github.com/KaiserY/mdbook-typst-pdf

      - name: Install fonts
        run: |
          echo | node<<'EOF'
          const axios = require('axios');
          const fs = require('fs');
          const path = require('path');
          const { promisify } = require('util');
          const mkdir = promisify(fs.mkdir);
          const writeFile = promisify(fs.writeFile);
          const { Sema } = require('async-sema');
          async function fetchFile(url, dir, fileName) {
              const filePath = path.join(dir, fileName);
              const response = await axios.get(url, { responseType: 'arraybuffer' });
              if (!fs.existsSync(path.dirname(filePath))) {
                  await mkdir(path.dirname(filePath), { recursive: true });
              }
              await writeFile(filePath, response.data);
          }
          async function downloadGoogleFonts(fontFamily, basePath) {
              const response = await axios.get(`https://fonts.google.com/download/list?family=${encodeURIComponent(fontFamily).replace(/%20/g, '+')}`);
              const jsonData = JSON.parse(response.data.split('\n').slice(1).join(''));
              const s = new Sema(6);
              const fetchPromises = jsonData.manifest.fileRefs.map(async file => {
                  await s.acquire();
                  try {
                      await fetchFile(file.url, path.join(basePath, fontFamily.replace(' ', '_')), file.filename);
                  } finally {
                      s.release();
                  }
              });
              await Promise.all(fetchPromises);
          }
          (async () => {
              const fonts = ["Noto Sans", "Noto Sans SC", "Noto Sans Mono", "Noto Sans KR", "Noto Sans Thai", "Noto Sans Arabic", "Noto Sans Hebrew", "Noto Sans Devanagari", "Noto Emoji"];
              for (const font of fonts) {
                  await downloadGoogleFonts(font, path.join(process.env.HOME, '.local', 'share', 'fonts'));
                  console.log(`Font family ${font} downloaded successfully.`);
              }
          })();
          EOF
          curl -sL -o times_sans_serif.zip https://dl.dafont.com/dl/?f=times_sans_serif
          unzip times_sans_serif.zip -d ~/.local/share/fonts/times_sans_serif
          fc-cache -rv

      - name: Install Calibre
        run: |
          sudo apt install -y libegl1 libopengl0 libxcb-cursor0
          sudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin

      - name: Build
        env:
          NODE_OPTIONS: --max_old_space_size=4096
        run: |
          sed -e "s/BUILD_TIME/$(TZ=Asia/Shanghai date -Isecond)/" -e "s/COMMIT_SHA/${{ github.sha }}/" -i src/about.md
          npm run build
          mv book/epub/药娘的天空.epub book/epub/transky-${{ github.sha }}.epub
          mv book/mobi/药娘的天空.mobi book/mobi/transky-${{ github.sha }}.mobi
          mv book/typst-pdf/药娘的天空.pdf book/typst-pdf/transky-${{ github.sha }}.pdf

      - name: Upload EPUB
        uses: actions/upload-artifact@v4
        with:
          name: epub
          path: book/epub/transky-*.epub

      - name: Upload MOBI
        uses: actions/upload-artifact@v4
        with:
          name: mobi
          path: book/mobi/transky-*.mobi

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: pdf
          path: book/typst-pdf/transky-*.pdf

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_PAGES_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_PAGES_ACCOUNT }}
          projectName: ${{ vars.CLOUDFLARE_PAGES_PROJECT_NAME }}
          directory: .vitepress/dist/
          wranglerVersion: 3

      - name: Release eBook
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.release) || ! (github.event_name == 'push' && contains(github.event.head_commit.message, '[skip release]')) }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: npx semantic-release
